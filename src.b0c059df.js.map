{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","intervalId","document","querySelector","init","time","getTimeComponents","updateTimerFace","setInterval","currentTime","Date","now","deltaTime","clearInterval","days","hours","mins","secs","textContent","pad","Math","floor","value","String","padStart","myTimer","window","onload","start","refs","inputEl","btnEl","inputValue","onInputBlur","e","target","updateTargetDateOnClick","console","log","addEventListener"],"mappings":";;;AA6FA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA5FA,QAAA,cAIMA,IAAAA,EAAAA,WACkC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC/BC,KAAAA,WAAa,KACbF,KAAAA,SAAWG,SAASC,cAAiBJ,GAAAA,OAAAA,IACrCC,KAAAA,WAAaA,EACbI,KAAAA,OAmFT,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OA/ES,MAAA,WACCC,IAAAA,EAAO,KAAKC,kBAAkB,GAC/BC,KAAAA,gBAAgBF,KA6EzB,CAAA,IAAA,QAzEU,MAAA,WAAA,IAAA,EAAA,KACDJ,KAAAA,WAAaO,YAAY,WACtBC,IAAAA,EAAcC,KAAKC,MACnBC,EAAY,EAAKZ,WAAaS,EAGhCG,GAAAA,GAAa,EAGf,OAFAC,cAAc,EAAKZ,iBACnB,EAAKG,OAIDC,IAAAA,EAAO,EAAKC,kBAAkBM,GACpC,EAAKL,gBAAgBF,IACpB,OA2DP,CAAA,IAAA,kBAvD+C,MAAA,SAAA,GAA3BS,IAAAA,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC9BlB,KAAAA,SAASI,cAAc,uBAAuBe,YAAcJ,EAC5Df,KAAAA,SAASI,cAAc,wBAAwBe,YAAcH,EAC7DhB,KAAAA,SAASI,cAAc,uBAAuBe,YAAcF,EAC5DjB,KAAAA,SAASI,cAAc,uBAAuBe,YAAcD,IAmDrE,CAAA,IAAA,oBA/CoBZ,MAAAA,SAAAA,GAQT,MAAA,CAAES,KAPI,KAAKK,IAAIC,KAAKC,MAAMhB,EAAQ,QAO1BU,MAND,KAAKI,IACjBC,KAAKC,MAAOhB,EAAQ,MAAyB,OAKzBW,KAHT,KAAKG,IAAIC,KAAKC,MAAOhB,EAAQ,KAAoB,MAGlCY,KAFf,KAAKE,IAAIC,KAAKC,MAAOhB,EAAQ,IAAc,SAyC5D,CAAA,IAAA,MAnCMiB,MAAAA,SAAAA,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,SAkCrC,EAxFM1B,GA2DA2B,EAAU,IAAI3B,EAAe,CACjCC,SAAU,WACVC,WAAY,IAAIU,KAAK,2BAIvBgB,OAAOC,OAASF,EAAQG,QAIxB,IAAMC,EAAO,CACXC,QAAS5B,SAASC,cAAc,gBAChC4B,MAAO7B,SAASC,cAAc,eAG5B6B,EAAa,GAIjB,SAASC,EAAYC,GACnBF,EAAaE,EAAEC,OAAOb,MAGxB,SAASc,EAAwBF,GAC/BT,EAAQzB,WAAa,IAAIU,KAAKsB,GAC9BK,QAAQC,IAAIb,EAAQzB,YACpB0B,OAAOC,OAASF,EAAQG,QAT1BC,EAAKC,QAAQS,iBAAiB,OAAQN,GAYtCJ,EAAKE,MAAMQ,iBAAiB,QAASH","file":"src.b0c059df.js","sourceRoot":"..\\src","sourcesContent":["// подключение стилей\r\nimport './main.css';\r\n\r\n// класс таймера обратного отсчета\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this.intervalId = null;\r\n    this.selector = document.querySelector(`${selector}`);\r\n    this.targetDate = targetDate;\r\n    this.init();\r\n  }\r\n\r\n  // очищает интерфейс до формата 00:00:00\r\n  init() {\r\n    const time = this.getTimeComponents(0);\r\n    this.updateTimerFace(time);\r\n  }\r\n\r\n  // таймер\r\n  start() {\r\n    this.intervalId = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const deltaTime = this.targetDate - currentTime;\r\n\r\n      // предотвращаем появление отрицательного времени\r\n      if (deltaTime <= 0) {\r\n        clearInterval(this.intervalId);\r\n        this.init();\r\n        return;\r\n      }\r\n\r\n      const time = this.getTimeComponents(deltaTime);\r\n      this.updateTimerFace(time);\r\n    }, 1000);\r\n  }\r\n\r\n  // обновляет интерфейс\r\n  updateTimerFace({ days, hours, mins, secs }) {\r\n    this.selector.querySelector('[data-value=\"days\"]').textContent = days;\r\n    this.selector.querySelector('[data-value=\"hours\"]').textContent = hours;\r\n    this.selector.querySelector('[data-value=\"mins\"]').textContent = mins;\r\n    this.selector.querySelector('[data-value=\"secs\"]').textContent = secs;\r\n  }\r\n\r\n  // принимает время в мс, вычисляет необходимые величины времени\r\n  getTimeComponents(time) {\r\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    const hours = this.pad(\r\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n    );\r\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n    return { days, hours, mins, secs };\r\n  }\r\n\r\n  // Принимает число, приводит к строке и добавляет в начало 0 если число меньше 2-х знаков\r\n  pad(value) {\r\n    return String(value).padStart(2, '0');\r\n  }\r\n}\r\n\r\n// создаем экземпляр согласно задания\r\nconst myTimer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Nov 25, 2020 10:57 AM'),\r\n});\r\n\r\n// запускаем при загрузке страницы\r\nwindow.onload = myTimer.start();\r\n\r\n// перезапуск таймера по кастомной дате\r\n\r\nconst refs = {\r\n  inputEl: document.querySelector('#timer-input'),\r\n  btnEl: document.querySelector('.timer-btn'),\r\n};\r\n\r\nlet inputValue = '';\r\n\r\nrefs.inputEl.addEventListener('blur', onInputBlur);\r\n\r\nfunction onInputBlur(e) {\r\n  inputValue = e.target.value;\r\n}\r\n\r\nfunction updateTargetDateOnClick(e) {\r\n  myTimer.targetDate = new Date(inputValue);\r\n  console.log(myTimer.targetDate);\r\n  window.onload = myTimer.start();\r\n}\r\n\r\nrefs.btnEl.addEventListener('click', updateTargetDateOnClick);\r\n"]}